"use strict";

(async () => {
  
  // Register our service worker
  if ('serviceWorker' in navigator) {

    var endpoint;

    // Register a Service Worker.
    navigator.serviceWorker.register('service-worker.js')
    .then(function(registration) {

      // Use the PushManager to get the user's subscription to the push service.
      return registration.pushManager.getSubscription()
      .then(function(subscription) {
        // If a subscription was found, return it.
        if (subscription) {
          return subscription;
        }

        // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
        // send notifications that don't have a visible effect for the user).
        return registration.pushManager.subscribe({ userVisibleOnly: true });
      });
    }).then(function(subscription) {
      endpoint = subscription.endpoint;

      // Send the subscription details to the server using the Fetch API.
      fetch('./register', {
        method: 'post',
        headers: {
          'Content-type': 'application/json'
        },
        body: JSON.stringify({
          endpoint: subscription.endpoint,
        }),
      });
    });

    document.getElementById('testPush').onclick = function() {
      var delay = document.getElementById('notification-delay').value;
      var ttl = document.getElementById('notification-ttl').value;

      // Ask the server to send the client a notification (for testing purposes, in real
      // applications the notification will be generated by some event on the server).
      fetch('./sendNotification?endpoint=' + endpoint + '&delay=' + delay +
            '&ttl=' + ttl,
        {
          method: 'post',
        }
      );
    };
  }

  document.addEventListener('DOMContentLoaded', function() {
    
    initializeCamera();
    
    /*
    postReport({
      location: {
        lat: null,
        lon: null
      },
      image: imageURL
    });
    */
  });

  async function initializeCamera() {
    navigator.mediaDevices.getUserMedia({
      video: true
    }).then(function(stream) {
      var video = document.createElement('video');
      video.srcObject = stream;
      document.querySelector('.camera').appendChild(video);
      video.play();

      // Get snapshot
      video.addEventListener('loadedmetadata',function() {
        
      },false);
    });
  }
  
  // Get location from geolocation API and fall back
  // to letting user pick a point on a map, which is
  // initialized via geoIP lookup and also allows search by text.
  async function getLocation() {
    if ("geolocation" in navigator) {
      /* geolocation is available */
    } else {
      document.body.innerHTML = "Geolocation is not available on this device, sorry."
    }

    // Geolocation
    navigator.geolocation.getCurrentPosition(function(position) {
      console.log(position.coords.latitude, position.coords.longitude);
    }, function(err) {
      console.error('GEO ERROR', err);
    });
  }

  async function getSnapshot() {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    let ratio = video.videoWidth / video.videoHeight;
    let width = video.videoWidth; // - 100;
    let height = video.videoHeight; //parseInt( width / ratio, 10);
    canvas.width = width;
    canvas.height = height;
    context.drawImage(video, 0, 0, width, height);

    //const imageData = context.getImageData(0, 0, width, height);

    // Preview image
    let imageURL = canvas.toDataURL('image/jpg');
    let img = document.createElement('img');
    img.src = imageURL;

    document.body.appendChild(canvas);
    console.log('added image preview');
  }

  async function postReport(msg) {
    fetch('/report', {
      method: 'post',
      headers: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(msg)
    })
    .then(function(res){
      console.log('uploaded');
    }, function(err) {
      console.error('error', err);
    });
  }
  
})();